'use client';

import React, { HTMLAttributes, CSSProperties } from 'react';
import cn from 'classnames';

import { parseSize, generateDynamicClass } from '@/utils';

interface ComponentProps
  extends HTMLAttributes<HTMLDivElement>,
    SpacingProps,
    SizeProps,
    StyleProps,
    CommonProps,
    DisplayProps,
    ConditionalProps,
    GridProps {}

const Grid = ({
  as: Component = 'div',
  inline,
  columns,
  gap,
  aspectRatio,
  tabletColumns,
  mobileColumns,
  transition,
  onBackground,
  background,
  solid,
  border,
  borderTop,
  borderRight,
  borderBottom,
  borderLeft,
  borderStyle,
  borderWidth,
  radius,
  padding,
  paddingLeft,
  paddingRight,
  paddingTop,
  paddingBottom,
  paddingX,
  paddingY,
  margin,
  marginLeft,
  marginRight,
  marginTop,
  marginBottom,
  marginX,
  marginY,
  textVariant,
  textSize,
  textWeight,
  position = 'relative',
  top,
  right,
  bottom,
  left,
  cursor,
  width,
  height,
  maxWidth,
  minWidth,
  minHeight,
  maxHeight,
  fit = false,
  fitWidth = false,
  fitHeight = false,
  fill = false,
  fillWidth = false,
  fillHeight = false,
  hide,
  show,
  overflow,
  overflowX,
  overflowY,
  zIndex,
  shadow,
  className,
  ref,
  style,
  children,
  ...rest
}: ComponentProps) => {
  const classes = cn(
    inline ? 'inline-grid' : 'grid',
    columns && `columns-${columns}`,
    tabletColumns && `tablet-columns-${tabletColumns}`,
    mobileColumns && `mobile-columns-${mobileColumns}`,
    generateDynamicClass('background', background),
    generateDynamicClass('solid', solid),
    generateDynamicClass(
      'border',
      border || borderTop || borderRight || borderBottom || borderLeft
    ),
    gap && `g-${gap}`,
    padding && `p-${padding}`,
    paddingLeft && `pl-${paddingLeft}`,
    paddingRight && `pr-${paddingRight}`,
    paddingTop && `pt-${paddingTop}`,
    paddingBottom && `pb-${paddingBottom}`,
    paddingX && `px-${paddingX}`,
    paddingY && `py-${paddingY}`,
    (border || borderTop || borderRight || borderBottom || borderLeft) &&
      !borderStyle &&
      'border-solid',
    (borderTop || borderRight || borderBottom || borderLeft) && 'border-reset',
    border && !borderWidth && 'border-1',
    borderTop && 'border-top-1',
    borderRight && 'border-right-1',
    borderBottom && 'border-bottom-1',
    borderLeft && 'border-left-1',
    borderWidth && `border-${borderWidth}`,
    borderStyle && `border-${borderStyle}`,
    radius === 'full' ? 'radius-full' : radius && `radius-${radius}`,
    margin && `m-${margin}`,
    marginLeft && `ml-${marginLeft}`,
    marginRight && `mr-${marginRight}`,
    marginTop && `mt-${marginTop}`,
    marginBottom && `mb-${marginBottom}`,
    marginX && `mx-${marginX}`,
    marginY && `my-${marginY}`,
    position && `position-${position}`,
    top && `top-${top}`,
    right && `right-${right}`,
    bottom && `bottom-${bottom}`,
    left && `left-${left}`,
    cursor && `cursor-${cursor}`,
    width,
    height,
    maxWidth,
    minWidth,
    minHeight,
    maxHeight,
    fit && 'fit',
    fitWidth && 'fit-width',
    fitHeight && 'fit-height',
    fill && 'fill',
    fillWidth && !minWidth && 'min-width-0',
    fillHeight && !minHeight && 'min-height-0',
    fill && 'min-height-0',
    fill && 'min-width-0',
    (fillWidth || maxWidth) && 'fill-width',
    (fillHeight || maxHeight) && 'fill-height',
    hide === 's' && `${hide}-grid-hide`,
    show === 's' && `${show}-grid-show`,
    overflow && `overflow-${overflow}`,
    overflowX && `overflow-x-${overflowX}`,
    overflowY && `overflow-y-${overflowY}`,
    zIndex && `z-index-${zIndex}`,
    shadow && `shadow-${shadow}`,
    textSize && `text-size-${textSize}`,
    textWeight && `text-weight-${textWeight}`,
    className
  );

  const styles: CSSProperties = {
    maxWidth: parseSize(maxWidth, 'width'),
    minWidth: parseSize(minWidth, 'width'),
    minHeight: parseSize(minHeight, 'height'),
    maxHeight: parseSize(maxHeight, 'height'),
    width: parseSize(width, 'width'),
    height: parseSize(height, 'height'),
    aspectRatio: aspectRatio,
    ...style,
  };

  return (
    <Component ref={ref} className={classes} style={styles} {...rest}>
      {children}
    </Component>
  );
};

export { Grid };
